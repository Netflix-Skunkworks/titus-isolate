#!/usr/share/python/titus-isolate/bin/python
import logging
from threading import Thread

import click
import docker

from titus_isolate import log
from titus_isolate.api.status import app, set_wm, set_em
from titus_isolate.cgroup.file_cgroup_manager import FileCgroupManager
from titus_isolate.config.cpu_allocator_watcher import CpuAllocatorWatcher
from titus_isolate.constants import FAILURE_EXIT_CODE
from titus_isolate.docker.create_event_handler import CreateEventHandler
from titus_isolate.docker.event_manager import EventManager
from titus_isolate.docker.free_event_handler import FreeEventHandler
from titus_isolate.docker.utils import get_current_workloads
from titus_isolate.isolate.utils import get_allocator_class
from titus_isolate.isolate.workload_manager import WorkloadManager
from titus_isolate.metrics.metrics_manager import MetricsManager
from titus_isolate.model.processor.config import get_cpu_from_env
from titus_isolate.real_exit_handler import RealExitHandler
from titus_isolate.utils import start_periodic_scheduling, get_config_manager


@click.command()
@click.option('--admin-port', default=5000, help="The port for the HTTP server to listen on (default: 5000)")
def main(admin_port):
    # Set the schedule library's logging level higher so it doesn't spam messages every time it schedules a task
    logging.getLogger('schedule').setLevel(logging.WARN)

    exit_handler = RealExitHandler()

    log.info("Starting watching for CPU allocator changes")
    CpuAllocatorWatcher(get_config_manager(), exit_handler)

    log.info("Modeling the CPU...")
    cpu = get_cpu_from_env()

    # Start period scheduling
    log.info("Starting periodic event scheduling...")
    start_periodic_scheduling()

    # Setup the workload manager
    log.info("Setting up the workload manager...")
    workload_manager = WorkloadManager(cpu, FileCgroupManager(), get_allocator_class(get_config_manager()))
    set_wm(workload_manager)

    # Setup the event handlers
    log.info("Setting up the Docker event handlers...")
    create_event_handler = CreateEventHandler(workload_manager)
    free_event_handler = FreeEventHandler(workload_manager)
    event_handlers = [create_event_handler, free_event_handler]

    # Start event processing
    log.info("Starting Docker event handling...")
    event_manager = EventManager(docker.from_env().events(), event_handlers)
    set_em(event_manager)

    # Report metrics
    log.info("Starting metrics reporting...")
    MetricsManager([workload_manager, event_manager])

    # Initialize currently running containers as workloads
    log.info("Isolating currently running workloads...")
    for workload in get_current_workloads(docker.from_env()):
        try:
            workload_manager.add_workload(workload)
        except:
            log.exception("Failed to add currently running workload: '{}', maybe it exited.".format(workload.get_id()))

    # Start processing events after adding running workloads to avoid processing a die event before we add a workload
    event_manager.start_processing_events()

    # Starting the HTTP server blocks exit forever
    log.info("Starting HTTP server")
    __start_http_server(admin_port)

    log.info("Startup complete, waiting for events...")
    event_manager.join()

    log.error("The workload manager should never exit, yet here we are...")
    exit_handler.exit(FAILURE_EXIT_CODE)


def __start_http_server(admin_port):
    # Starting the HTTP server blocks exit forever
    def __run_http_server():
        app.run(host="0.0.0.0", debug=False, port=admin_port)

    http_server_thread = Thread(target=__run_http_server)
    http_server_thread.daemon = True
    http_server_thread.start()


if __name__ == "__main__":
    main()
